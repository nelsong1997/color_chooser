{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","cookies","state","red","green","blue","previousColors","colorSurfInterval","resetTimeout","optionsTimeout","hasBeenReset","surfingColors","optionsOpen","optionsOpacity","theColors","get","name","currentColor","otherOptions","pseudoRandom","pseudoRandomCount","weighting","exporting","importing","clickMode","currentlyEditing","colorPresets","colors","textDisplay","rgb","countBoolean","count","touchStart","bind","touchEnd","mouseDown","mouseUp","beginClick","endClick","changeColor","closeOptions","deleteColor","pseudoRandomCheckChange","pseudoRandomCountChange","editColor","closeEditMenu","saveColorEdits","colorInputChange","openAddColor","presetSelect","openNamePreset","savePreset","textDisplayCheckChange","otherOptionChange","weightInputChange","deletePreset","pseudoRandomCountInput","React","createRef","pseudoRandomCheckbox","nameInput","redInput","greenInput","blueInput","presetSelector","weightInput","importTextArea","this","surfColors","setState","clearTimeout","clearInterval","thePreviousColors","slice","length","availableColors","color","weight","i","includes","j","push","chosenColorIndex","randomInteger","colorInputObject","redT","greenT","blueT","Math","asin","redRate","greenRate","blueRate","setInterval","floor","sin","setTimeout","openOptions","initRed","initGreen","initBlue","openOptionsInterval","stateObject","editingColorNum","addingColor","namingPreset","weightingSection","editing","colorNum","pseudoRandomSection","addingColorSection","colorArray","className","key","id","type","min","defaultValue","ref","onChange","viewBox","points","style","fill","stroke","strokeWidth","textShadow","onClick","max","defaultChecked","theOptions","value","deletePresetButton","current","importExportSection","JSON","stringify","readOnly","backgroundColor","opacity","set","path","event","colorNumber","Number","target","splice","checked","theInput","checkIntInRange","theColor","totallyNewObject","prop","theWeight","inputNum","input","preset","presetNumber","newColorPreset","presetNum","whatIsChanging","newTextDisplay","countSection","nameSection","rgbSection","textColor","standbyName","standbyColors","e","combinedPresets","newPresets","parse","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onTouchCancel","touchCancel","optionsMenu","Component","range","random","withCookies","Boolean","window","location","hostname","match","ReactDOM","render","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7d111b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { instanceOf } from 'prop-types';\r\nimport { withCookies, Cookies } from 'react-cookie';\r\n\r\nclass App extends React.Component {\r\n    static propTypes = {\r\n        cookies: instanceOf(Cookies).isRequired\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n        const { cookies } = props;\r\n\r\n        this.state = {\r\n            red: 94,\r\n            green: 36,\r\n            blue: 102,\r\n            previousColors: [],\r\n            colorSurfInterval: null,\r\n            resetTimeout: null,\r\n            optionsTimeout: null,\r\n            hasBeenReset: false, //change to transitioning?\r\n            surfingColors: true, // change this and below to a single prop in state with string value?\r\n            optionsOpen: false,\r\n            optionsOpacity: 0,\r\n            theColors: cookies.get('theColors') || [\r\n                {red: 44,  green: 44,  blue: 88,  name: \"indigo\"},\r\n                {red: 0,   green: 0,   blue: 0,   name: \"black\" },\r\n                {red: 158, green: 20,  blue: 20,  name: \"red\"   },\r\n                {red: 239, green: 90,  blue: 173, name: \"pink\"  },\r\n                {red: 25,  green: 60,  blue: 9,   name: \"green\" },\r\n                {red: 49,  green: 115, blue: 198, name: \"blue\"  }\r\n            ],\r\n            currentColor: null,\r\n            otherOptions: cookies.get('otherOptions') || {\r\n                pseudoRandom: true,\r\n                pseudoRandomCount: 2,\r\n                weighting: false,\r\n                exporting: false,\r\n                importing: false,\r\n            },\r\n            clickMode: \"click\",\r\n            currentlyEditing: {},\r\n            colorPresets: cookies.get('colorPresets') || [\r\n                {\r\n                    name: \"the captain\",\r\n                    colors: [\r\n                        {red: 44,  green: 44,  blue: 88,  name: \"indigo\"},\r\n                        {red: 0,   green: 0,   blue: 0,   name: \"black\" },\r\n                        {red: 158, green: 20,  blue: 20,  name: \"red\"   },\r\n                        {red: 239, green: 90,  blue: 173, name: \"pink\"  },\r\n                        {red: 25,  green: 60,  blue: 9,   name: \"green\" },\r\n                        {red: 49,  green: 115, blue: 198, name: \"blue\"  }\r\n                    ]\r\n                }\r\n            ],\r\n            textDisplay: cookies.get('textDisplay') || {\r\n                name: false,\r\n                rgb: false,\r\n                countBoolean: false,\r\n                count: 0\r\n            }\r\n        }\r\n\r\n        this.touchStart = this.touchStart.bind(this);\r\n        this.touchEnd = this.touchEnd.bind(this);\r\n        this.mouseDown = this.mouseDown.bind(this);\r\n        this.mouseUp = this.mouseUp.bind(this);\r\n        this.beginClick = this.beginClick.bind(this);\r\n        this.endClick = this.endClick.bind(this);\r\n        this.changeColor = this.changeColor.bind(this);\r\n        this.closeOptions = this.closeOptions.bind(this);\r\n        this.deleteColor = this.deleteColor.bind(this);\r\n        this.pseudoRandomCheckChange = this.pseudoRandomCheckChange.bind(this);\r\n        this.pseudoRandomCountChange = this.pseudoRandomCountChange.bind(this);\r\n        this.touchStart = this.touchStart.bind(this);\r\n        this.editColor = this.editColor.bind(this);\r\n        this.closeEditMenu = this.closeEditMenu.bind(this);\r\n        this.saveColorEdits = this.saveColorEdits.bind(this);\r\n        this.colorInputChange = this.colorInputChange.bind(this);\r\n        this.openAddColor = this.openAddColor.bind(this);\r\n        this.presetSelect = this.presetSelect.bind(this);\r\n        this.openNamePreset = this.openNamePreset.bind(this);\r\n        this.savePreset = this.savePreset.bind(this);\r\n        this.textDisplayCheckChange = this.textDisplayCheckChange.bind(this);\r\n        this.otherOptionChange = this.otherOptionChange.bind(this);\r\n        this.weightInputChange = this.weightInputChange.bind(this);\r\n        this.deletePreset = this.deletePreset.bind(this);\r\n\r\n        this.pseudoRandomCountInput = React.createRef();\r\n        this.pseudoRandomCheckbox = React.createRef();\r\n        this.nameInput = React.createRef();\r\n        this.redInput = React.createRef();\r\n        this.greenInput = React.createRef();\r\n        this.blueInput = React.createRef();\r\n        this.presetSelector = React.createRef();\r\n        this.weightInput = React.createRef();\r\n        this.importTextArea = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.surfColors()\r\n    }\r\n\r\n    mouseDown() {\r\n        if (this.state.clickMode===\"click\") {\r\n            this.beginClick()\r\n        }\r\n    }\r\n\r\n    mouseUp() {\r\n        if (this.state.clickMode===\"click\") {\r\n            this.endClick()\r\n        }\r\n    }\r\n\r\n    touchStart() {\r\n        this.setState( {clickMode: \"touch\"} )\r\n        this.beginClick()\r\n    }\r\n    \r\n    touchEnd() {\r\n        this.endClick()\r\n    }\r\n\r\n    beginClick() {\r\n        if (!this.state.surfingColors && !this.state.optionsOpen) {\r\n            this.resetTimeout()\r\n        } else if (this.state.surfingColors && !this.state.optionsOpen) {\r\n            this.optionsTimeout()\r\n        }\r\n    }\r\n\r\n    endClick() {\r\n        this.setState({hasBeenReset: false})\r\n        clearTimeout(this.state.resetTimeout)\r\n        clearTimeout(this.state.optionsTimeout)\r\n        if (!this.state.hasBeenReset && !this.state.optionsOpen) {\r\n            clearInterval(this.state.colorSurfInterval)\r\n            this.setState({surfingColors: false})\r\n            this.changeColor()\r\n        }\r\n    }\r\n\r\n    changeColor() { //needs a way to confirm click registered, particularly when PR is disabled (count? text flash?)\r\n        let thePreviousColors = this.state.previousColors.slice(0, this.state.previousColors.length)\r\n        let theColors = this.state.theColors.slice(0, this.state.theColors.length)\r\n        let pseudoRandom = this.state.otherOptions.pseudoRandom\r\n        let pseudoRandomCount = this.state.otherOptions.pseudoRandomCount\r\n        let textDisplay = this.state.textDisplay\r\n        let weighting = this.state.otherOptions.weighting\r\n\r\n        let availableColors = [] //specifying which colors are viable to choose\r\n        if (weighting) {\r\n            for (let color of theColors) {\r\n                color.weight = color.weight || 1 //some colors might not have weights...if they don't we'll give them the weight 1\r\n            }\r\n        } else {\r\n            for (let color of theColors) {\r\n                color.weight = 1        //without weighting, every color has weight 1\r\n            }\r\n        }\r\n        if (!pseudoRandom) thePreviousColors = [] //this should already be empty if PR is off, but just in case\r\n        for (let i = 0; i < theColors.length; i++) {\r\n            if (!thePreviousColors.includes(i)) {\r\n                for (let j=0; j<theColors[i].weight; j++) {\r\n                    availableColors.push(i)\r\n                }\r\n            }\r\n        }\r\n\r\n        let chosenColorIndex = availableColors[randomInteger(0, availableColors.length - 1)] //choosing a new color to change to\r\n\r\n        if (pseudoRandom) { //we don't need to keep track of the prev colors if PR is off\r\n            thePreviousColors.push(chosenColorIndex) //updating previous colors array in state\r\n            if (thePreviousColors.length<=pseudoRandomCount) {\r\n                this.setState({\r\n                    previousColors: thePreviousColors\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    previousColors: thePreviousColors.slice(1,thePreviousColors.length)\r\n                })\r\n            }\r\n        }\r\n\r\n        textDisplay.count++\r\n\r\n        this.setState({ //changing the color\r\n            red: theColors[chosenColorIndex].red,\r\n            green: theColors[chosenColorIndex].green,\r\n            blue: theColors[chosenColorIndex].blue,\r\n            currentColor: chosenColorIndex,\r\n            textDisplay: textDisplay\r\n        })\r\n    }\r\n\r\n    surfColors(colorInputObject) {                    //setting up a color shifting wait screen; starts from color that is input, if there is one\r\n        this.setState({surfingColors: true})\r\n        let redT = randomInteger(0, 100)   //initial values for the variable; sin of this variable will be the color value\r\n        let greenT = randomInteger(0, 100)\r\n        let blueT = randomInteger(0, 100)\r\n        if (colorInputObject) {                                //if from a reset; starting with the color we reset from\r\n            redT = Math.asin((colorInputObject.red - 128)/128)\r\n            greenT = Math.asin((colorInputObject.green - 128)/128)\r\n            blueT = Math.asin((colorInputObject.blue - 128)/128)\r\n        }\r\n        let redRate = randomInteger(0, 100)/10000 + 0.005 //how fast this color value changes\r\n        let greenRate = randomInteger(0, 100)/10000 + 0.005\r\n        let blueRate = randomInteger(0, 100)/10000 + 0.005\r\n\r\n        let colorSurfInterval = setInterval(()=>{\r\n            redT = redT + redRate\r\n            greenT = greenT + greenRate\r\n            blueT = blueT + blueRate\r\n            this.setState(\r\n                {\r\n                    red:   Math.floor((Math.sin(redT))*128 + 128), //sin is used to avoid rapid shift from 255 to 0\r\n                    green: Math.floor((Math.sin(greenT))*128 + 128),\r\n                    blue:  Math.floor((Math.sin(blueT))*128 + 128)\r\n                }\r\n            )\r\n        }, 16.67) //60hz\r\n        this.setState({colorSurfInterval: colorSurfInterval})\r\n    }\r\n\r\n    resetTimeout() {\r\n        let resetTimeout = setTimeout(() => {\r\n            let textDisplay = this.state.textDisplay\r\n            textDisplay.count = 0\r\n            this.setState({\r\n                previousColors: [],\r\n                hasBeenReset: true,\r\n                currentColor: null,\r\n                textDisplay: textDisplay\r\n            }) //reset\r\n            this.surfColors({\r\n                red: this.state.red,\r\n                green: this.state.green,\r\n                blue: this.state.blue\r\n            })\r\n        }, 1000)                                    //hold for 1 sec to reset\r\n        this.setState({resetTimeout: resetTimeout})\r\n    }\r\n\r\n    optionsTimeout() {\r\n        let optionsTimeout = setTimeout(() => {\r\n            clearInterval(this.state.colorSurfInterval)\r\n            this.setState({optionsOpen: true, surfingColors: false}) //open em up\r\n            this.openOptions()\r\n        }, 1000)                                    //hold for 1 sec to open\r\n        this.setState({optionsTimeout: optionsTimeout})\r\n    }\r\n\r\n    openOptions() {\r\n        let initRed = this.state.red\r\n        let initGreen = this.state.green\r\n        let initBlue = this.state.blue\r\n\r\n        let redRate = Math.floor((initRed-20)/30) + 1\r\n        let greenRate = Math.floor((initGreen-20)/30) + 1\r\n        let blueRate = Math.floor((initBlue-20)/30) + 1\r\n\r\n        let openOptionsInterval = setInterval(()=>{\r\n            if (this.state.red > 20 || this.state.green > 20 || this.state.blue > 20) { //this can result in negative values..reconsider?\r\n                this.setState({\r\n                    red: this.state.red - redRate,\r\n                    green: this.state.green - greenRate,\r\n                    blue: this.state.blue - blueRate,\r\n                    optionsOpacity: this.state.optionsOpacity + .03333\r\n                })\r\n            } else {\r\n                clearInterval(openOptionsInterval)\r\n                this.setState({\r\n                    red: 20,\r\n                    green: 20, \r\n                    blue: 20,\r\n                    optionsOpacity: 1\r\n                })\r\n            }\r\n        }, 16.67)\r\n    }\r\n\r\n    optionsMenu(stateObject) {\r\n        let optionsOpen = stateObject.optionsOpen\r\n        if (!optionsOpen) {\r\n            return null;\r\n        } else {\r\n            let theColors = stateObject.theColors\r\n            let pseudoRandom = stateObject.otherOptions.pseudoRandom\r\n            let weighting = stateObject.otherOptions.weighting\r\n            let colorPresets = stateObject.colorPresets\r\n            let currentlyEditing = stateObject.currentlyEditing\r\n            let editingColorNum = null;\r\n            let addingColor = false;\r\n            let namingPreset = false;\r\n            let weightingSection = null;\r\n            if (currentlyEditing.editing===\"color\") editingColorNum = currentlyEditing.colorNum\r\n            if (currentlyEditing.editing===\"adding color\") addingColor = true;\r\n            if (currentlyEditing.editing===\"naming preset\") namingPreset = true;\r\n            let colorArray = []\r\n            let i = 0\r\n            for (let color of theColors) {\r\n                if (weighting) {\r\n                    weightingSection = [\r\n                        <div className=\"color-item more-indented\" key=\"0\">\r\n                            <div className=\"color-item-inner\">\r\n                                <label>weight:</label>\r\n                                <input\r\n                                    id={\"weight-input-\" + i} type=\"number\" min=\"0\" className=\"num-input\"\r\n                                    defaultValue={color.weight || 1} ref={this.weightInput} onChange={this.weightInputChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    ]\r\n                }\r\n                if (currentlyEditing.editing!==\"color\" || i!==editingColorNum) { //something else is being edited or nothing is being edited\r\n                    colorArray.push(\r\n                        <div key={i} className=\"color-item\">\r\n                            <div className=\"color-item-inner\">\r\n                                <label><strong>color {i+1}</strong></label>\r\n                                <svg className=\"color-box\" viewBox=\"0 0 10 5\">                    {/*a little box to show what the color is*/}\r\n                                    <polygon points=\"0,0 10,0 10,5 0,5\" style={{fill: `rgb(${color.red},${color.green},${color.blue})`, stroke: \"rgb(220,220,220)\", strokeWidth: \"1\"}}/>\r\n                                </svg>\r\n                                <label style={{\r\n                                    color: `rgb(${color.red},${color.green},${color.blue})`,\r\n                                    textShadow: \"-1px 0 rgb(220,220,220), 0 1px rgb(220,220,220), 1px 0 rgb(220,220,220), 0 -1px rgb(220,220,220)\"\r\n                                }}>\r\n                                    <strong>{color.name}</strong>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"color-item-inner\">\r\n                                <button id={\"edit-button-\" + i} className=\"square-button\" key={i}>\r\n                                    <svg className=\"edit-svg\" id={i} viewBox=\"0 0 10 10\" onClick={this.editColor}>        {/* this is the pencil icon for editing a color*/}\r\n                                        <polygon id={i} points=\"1,9 2,7 8,1 9,2 3,8\" style={{fill: \"green\", stroke: \"green\", strokeWidth: \"1\"}}/>\r\n                                    </svg>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                } else if (i===editingColorNum) { //this color is being edited\r\n                    colorArray.push(\r\n                        <div key={i}>\r\n                            <div className=\"color-item\">\r\n                                <div className=\"color-item-inner\">\r\n                                    <button id={\"trash-\" + i} className=\"square-button\">\r\n                                        <svg id={i} className=\"trash\" viewBox=\"0 0 10 10\" onClick={this.deleteColor}>\r\n                                            <polygon id={i} points=\"2,9 8,9 8,3 9,3 9,2 8,2 8,1 2,1 2,2 1,2 1,3 2,3\" style={{fill: \"gray\", stroke: \"gray\", strokeWidth: \"1\"}}/>\r\n                                        </svg>\r\n                                    </button>\r\n                                    <label>name: </label>\r\n                                    <input type=\"text\" id=\"name-input\" defaultValue={color.name} ref={this.nameInput}/>\r\n                                </div>\r\n                                <div className=\"color-item-inner\">\r\n                                    <button className=\"square-button\">\r\n                                        <svg className=\"red-x\" viewBox=\"0 0 10 10\" onClick={this.closeEditMenu}>    {/* this is the x to close edit menu*/}\r\n                                            <polygon id={i} points=\"1,2 2,1 9,8 8,9\" style={{fill: \"red\", stroke: \"red\", strokeWidth: \"1\"}}/>\r\n                                            <polygon id={i} points=\"9,2 8,1 1,8 2,9\" style={{fill: \"red\", stroke: \"red\", strokeWidth: \"1\"}}/>\r\n                                        </svg>\r\n                                    </button>\r\n                                    <button id={\"save-edits-\" + i} className=\"square-button\">\r\n                                        <svg className=\"save-edits\" id={i} viewBox=\"0 0 10 8\" onClick={this.saveColorEdits}>\r\n                                            <polygon id={i} points=\"1,4 2,3 4,5 8,1 9,2 4,7\" style={{fill: \"green\", stroke: \"green\", strokeWidth: \"1\"}}/>\r\n                                        </svg>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"color-item more-indented\">\r\n                                <div className=\"color-item-inner\">\r\n                                    <label>r:</label>\r\n                                    <input\r\n                                        id={\"red-input-\" + i} type=\"number\" min=\"0\" max=\"255\" className=\"num-input\"\r\n                                        defaultValue={color.red} ref={this.redInput} onChange={this.colorInputChange}\r\n                                    />\r\n                                    <label>g:</label>\r\n                                    <input\r\n                                        id={\"green-input-\" + i} type=\"number\" min=\"0\" max=\"255\" className=\"num-input\"\r\n                                        defaultValue={color.green} ref={this.greenInput} onChange={this.colorInputChange}\r\n                                    />\r\n                                    <label>b:</label>\r\n                                    <input\r\n                                        id={\"blue-input-\" + i} type=\"number\" min=\"0\" max=\"255\" className=\"num-input\"\r\n                                        defaultValue={color.blue} ref={this.blueInput} onChange={this.colorInputChange}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            {weightingSection}\r\n                        </div>\r\n                    )\r\n                }\r\n                i++;\r\n            }\r\n\r\n            let pseudoRandomSection;\r\n            if (pseudoRandom) {\r\n                pseudoRandomSection = [\r\n                    <label key=\"0\">\r\n                        <input\r\n                            type=\"checkbox\" name=\"pseudo-random-check\" ref={this.pseudoRandomCheckbox}\r\n                            onChange={this.pseudoRandomCheckChange} defaultChecked={pseudoRandom}\r\n                        />pseudo randomness\r\n                    </label>,\r\n                    <label className=\"indented\" key=\"1\"># of excluded colors: \r\n                        <input \r\n                            type=\"number\" className=\"num-input\" name=\"pseudo-random-count\" //needs a check for posint in range\r\n                            min=\"1\" max={this.state.theColors.length - 1}\r\n                            onChange={this.pseudoRandomCountChange} defaultValue={this.state.otherOptions.pseudoRandomCount}\r\n                            ref={this.pseudoRandomCountInput}\r\n                        />\r\n                    </label>\r\n                ]\r\n            } else {\r\n                pseudoRandomSection = [\r\n                    <label key=\"0\">\r\n                        <input\r\n                            type=\"checkbox\" name=\"pseudo-random-check\" ref={this.pseudoRandomCheckbox}\r\n                            onChange={this.pseudoRandomCheckChange} defaultChecked={pseudoRandom}\r\n                        />pseudo randomness\r\n                    </label>\r\n                ]\r\n            }\r\n            let addingColorSection;\r\n            if (addingColor) {\r\n                if (weighting) {\r\n                    weightingSection = [\r\n                        <div className=\"color-item more-indented\" key=\"2\">\r\n                            <div className=\"color-item-inner\">\r\n                                <label>weight:</label>\r\n                                <input\r\n                                    id=\"weight-input\" type=\"number\" min=\"0\" className=\"num-input\"\r\n                                    defaultValue=\"1\" ref={this.weightInput} onChange={this.weightInputChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    ]\r\n                }\r\n                addingColorSection = [\r\n                    <div className=\"color-item\" key=\"0\">\r\n                        <div className=\"color-item-inner\">\r\n                            <label>name: </label>\r\n                            <input type=\"text\" id=\"name-input\" ref={this.nameInput}/>\r\n                        </div>\r\n                        <div className=\"color-item-inner\">\r\n                            <button className=\"square-button\">\r\n                                <svg className=\"red-x\" viewBox=\"0 0 10 10\" onClick={this.closeEditMenu}>    {/* this is the x to close edit menu*/}\r\n                                    <polygon points=\"1,2 2,1 9,8 8,9\" style={{fill: \"red\", stroke: \"red\", strokeWidth: \"1\"}}/>\r\n                                    <polygon points=\"9,2 8,1 1,8 2,9\" style={{fill: \"red\", stroke: \"red\", strokeWidth: \"1\"}}/>\r\n                                </svg>\r\n                            </button>\r\n                            <button id=\"save-new-color\" className=\"square-button\">\r\n                                <svg id=\"save-new-color\" className=\"save-edits\" viewBox=\"0 0 10 8\" onClick={this.saveColorEdits}>\r\n                                    <polygon id=\"save-new-color\" points=\"1,4 2,3 4,5 8,1 9,2 4,7\" style={{fill: \"green\", stroke: \"green\", strokeWidth: \"1\"}}/>\r\n                                </svg>\r\n                            </button>\r\n                        </div>\r\n                    </div>,\r\n                    <div className=\"color-item more-indented\" key=\"1\">\r\n                        <div className=\"color-item-inner\">\r\n                            <label>r:</label>\r\n                            <input\r\n                                id=\"red-input\" type=\"number\" min=\"0\" max=\"255\" className=\"num-input\"\r\n                                ref={this.redInput} onChange={this.colorInputChange}\r\n                            />\r\n                            <label>g:</label>\r\n                            <input\r\n                                id=\"green-input\" type=\"number\" min=\"0\" max=\"255\" className=\"num-input\"\r\n                                ref={this.greenInput} onChange={this.colorInputChange}\r\n                            />\r\n                            <label>b:</label>\r\n                            <input\r\n                                id=\"blue-input\" type=\"number\" min=\"0\" max=\"255\" className=\"num-input\"\r\n                                ref={this.blueInput} onChange={this.colorInputChange}\r\n                            />\r\n                        </div>\r\n                    </div>,\r\n                    weightingSection\r\n                ]\r\n            } else if (namingPreset) {\r\n                addingColorSection = [\r\n                    <div className=\"options-section\" key=\"0\">\r\n                        <div className=\"color-item\">\r\n                            <div className=\"color-item-inner\">\r\n                                <label>preset name: </label>\r\n                                <input type=\"text\" id=\"name-input\" ref={this.nameInput}/>\r\n                            </div>\r\n                            <div className=\"color-item-inner\">\r\n                                <button className=\"square-button\">\r\n                                    <svg className=\"red-x\" viewBox=\"0 0 10 10\" onClick={this.closeEditMenu}>    {/* this is the x to close edit menu*/}\r\n                                        <polygon points=\"1,2 2,1 9,8 8,9\" style={{fill: \"red\", stroke: \"red\", strokeWidth: \"1\"}}/>\r\n                                        <polygon points=\"9,2 8,1 1,8 2,9\" style={{fill: \"red\", stroke: \"red\", strokeWidth: \"1\"}}/>\r\n                                    </svg>\r\n                                </button>\r\n                                <button id=\"save-preset\" className=\"square-button\">\r\n                                    <svg id=\"save-preset\" className=\"save-edits\" viewBox=\"0 0 10 8\" onClick={this.savePreset}>\r\n                                        <polygon id=\"save-preset\" points=\"1,4 2,3 4,5 8,1 9,2 4,7\" style={{fill: \"green\", stroke: \"green\", strokeWidth: \"1\"}}/>\r\n                                    </svg>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ]\r\n            } else {\r\n                addingColorSection = [\r\n                    <div className=\"button-container\" key=\"0\">\r\n                        <button className=\"big-button\" onClick={this.openAddColor}>add color</button>\r\n                        <button className=\"big-button\" onClick={this.openNamePreset}>save preset</button>\r\n                    </div>\r\n                ];\r\n            }\r\n            let theOptions = [\r\n                <option value=\"\" key=\"0\">Select a color preset</option>\r\n            ]\r\n            for (let i=0; i<colorPresets.length; i++) {\r\n                theOptions.push(\r\n                    <option value={i} key={i+1}>{colorPresets[i].name}</option>\r\n                )\r\n            }\r\n            let deletePresetButton = null\r\n            if (this.presetSelector.current && this.presetSelector.current.value!==\"\") {\r\n                deletePresetButton = [\r\n                    <button className=\"square-button\" key=\"0\">\r\n                        <svg className=\"trash\" viewBox=\"0 0 10 10\" onClick={this.deletePreset}>\r\n                            <polygon points=\"2,9 8,9 8,3 9,3 9,2 8,2 8,1 2,1 2,2 1,2 1,3 2,3\" style={{fill: \"gray\", stroke: \"gray\", strokeWidth: \"1\"}}/>\r\n                        </svg>\r\n                    </button>\r\n                ]\r\n            }\r\n            \r\n            let importExportSection = null\r\n            if (!stateObject.otherOptions.exporting && !stateObject.otherOptions.importing) {\r\n                importExportSection = [\r\n                    <div className=\"button-container\" key=\"0\">\r\n                        <button id=\"import-button\" className=\"big-button\" onClick={this.otherOptionChange}>import presets</button>\r\n                        <button id=\"export-button\" className=\"big-button\" onClick={this.otherOptionChange}>export presets</button>\r\n                    </div>\r\n                ]\r\n            } else if (stateObject.otherOptions.importing) {\r\n                importExportSection = [\r\n                    <textarea key=\"0\" ref={this.importTextArea}/>,\r\n                    <div className=\"button-container\" key=\"1\">\r\n                        <button id=\"confirm-import\" className=\"big-button\" onClick={this.otherOptionChange}>confirm import</button>\r\n                        <button id=\"import-export-cancel\" className=\"big-button\" onClick={this.otherOptionChange}>cancel</button>\r\n                    </div>\r\n                ]\r\n            } else if (stateObject.otherOptions.exporting) {\r\n                importExportSection = [\r\n                    <textarea key=\"0\" value={JSON.stringify(this.state.colorPresets)} readOnly/>,\r\n                    <div className=\"button-container\" key=\"1\">\r\n                        <button id=\"import-export-cancel\" className=\"big-button\" onClick={this.otherOptionChange}>cancel</button>\r\n                    </div>\r\n                ]\r\n            }\r\n\r\n            return ( \r\n                <div id=\"options-menu\" style={{backgroundColor: `rgb(${this.state.red},${this.state.green},${this.state.blue})`, opacity: stateObject.optionsOpacity}}>\r\n                    <div id=\"the-x-div\">\r\n                        <button id=\"the-x-button\" className=\"square-button\">\r\n                            <svg id=\"the-x\" viewBox=\"0 0 10 10\" onClick={this.closeOptions}>                    {/* this is the x to get out of the options*/}\r\n                                <polygon points=\"1,2 2,1 9,8 8,9\" style={{fill: \"rgb(220,220,220)\", stroke: \"rgb(220,220,220)\", strokeWidth: \"1\"}}/>\r\n                                <polygon points=\"9,2 8,1 1,8 2,9\" style={{fill: \"rgb(220,220,220)\", stroke: \"rgb(220,220,220)\", strokeWidth: \"1\"}} />\r\n                            </svg>\r\n                        </button>\r\n                    </div>\r\n                    <h1>Options</h1>\r\n                    <div className=\"options-section\">\r\n                        <h2>Colors</h2>\r\n                        {colorArray}\r\n                        {addingColorSection}\r\n                    </div>\r\n                    <div className=\"options-section\">\r\n                        <div className=\"color-item\">\r\n                            <div className=\"color-item-inner\">\r\n                                {deletePresetButton}\r\n                                <select onChange={this.presetSelect} ref={this.presetSelector}>\r\n                                    {theOptions}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        {importExportSection}\r\n                    </div>\r\n                    <div className=\"options-section\">\r\n                        <h2>Other</h2>\r\n                        {pseudoRandomSection}\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\" name=\"name-display-check\" onChange={this.textDisplayCheckChange}\r\n                                defaultChecked={stateObject.textDisplay.name}\r\n                            />display color name\r\n                        </label>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\" name=\"rgb-display-check\" onChange={this.textDisplayCheckChange}\r\n                                defaultChecked={stateObject.textDisplay.rgb}\r\n                            />display rgb values\r\n                        </label>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\" name=\"count-display-check\" onChange={this.textDisplayCheckChange}\r\n                                defaultChecked={stateObject.textDisplay.countBoolean}\r\n                            />display count\r\n                        </label>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\" name=\"weighting-check\" onChange={this.otherOptionChange}\r\n                                defaultChecked={stateObject.weighting}\r\n                            />enable weighting of results\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    closeOptions() {\r\n        const { cookies } = this.props;\r\n        let otherOptions = this.state.otherOptions\r\n        otherOptions.exporting = false\r\n        otherOptions.importing = false\r\n        this.setState( {optionsOpen: false, currentlyEditing: {}, optionsOpacity: 0, otherOptions: otherOptions} )\r\n        let charcoal = {\r\n            red: 20,\r\n            green: 20,\r\n            blue: 20\r\n        }\r\n        this.surfColors(charcoal)\r\n        cookies.set('theColors', this.state.theColors, { path: '/' });\r\n        cookies.set('otherOptions', this.state.otherOptions, { path: '/' });\r\n        cookies.set('colorPresets', this.state.colorPresets, { path: '/' });\r\n        cookies.set('textDisplay', this.state.textDisplay, { path: '/' });\r\n    }\r\n    \r\n    deleteColor(event) {\r\n        let colorNumber = Number(event.target.id.slice(-1))\r\n        let theColors = this.state.theColors\r\n        let pseudoRandom = this.state.pseudoRandom\r\n        let pseudoRandomCount = this.state.pseudoRandomCount\r\n        theColors.splice(colorNumber, 1)\r\n        this.setState( {theColors: theColors} )\r\n        if (theColors.length <= pseudoRandomCount && pseudoRandom) {\r\n            this.setState( {pseudoRandomCount: theColors.length - 1} )\r\n            this.pseudoRandomCountInput.current.value = theColors.length - 1\r\n        }\r\n        if (theColors.length===1) {\r\n            this.setState( {pseudoRandom: false} )\r\n            this.pseudoRandomCheckbox.current.checked = false\r\n        }\r\n        this.setState({currentlyEditing: {}})\r\n    }\r\n\r\n    pseudoRandomCheckChange(event) {\r\n        let otherOptions = this.state.otherOptions\r\n        otherOptions.pseudoRandom = !otherOptions.pseudoRandom\r\n        this.setState({otherOptions: otherOptions})\r\n    }\r\n\r\n    pseudoRandomCountChange(event) {\r\n        let otherOptions = this.state.otherOptions\r\n        let theInput = Number(event.target.value)\r\n        let theColors = this.state.theColors\r\n    \r\n        if (event.target.value===\"\") { return\r\n        } else if (checkIntInRange(theInput, 0, theColors.length)) {\r\n            otherOptions.pseudoRandomCount = theInput\r\n            this.setState({otherOptions: otherOptions})\r\n        } else {\r\n            this.pseudoRandomCountInput.current.value = otherOptions.pseudoRandomCount\r\n        }\r\n    }\r\n\r\n    editColor(event) {\r\n        let colorNumber = Number(event.target.id.slice(-1))\r\n        let theColor = this.state.theColors.slice(0)[colorNumber]\r\n        let totallyNewObject = {}\r\n        for (let prop in theColor) {\r\n            totallyNewObject[prop] = theColor[prop]\r\n        }\r\n        this.setState({\r\n            currentlyEditing: {\r\n                editing: \"color\",\r\n                colorNum: colorNumber,\r\n                color: totallyNewObject\r\n            }\r\n        })\r\n    }\r\n\r\n    closeEditMenu() {                 //closes ANY editing/adding menu\r\n        this.setState({currentlyEditing: {}})\r\n    }\r\n\r\n    saveColorEdits(event) {\r\n        let colorNumber = Number(event.target.id.slice(-1))\r\n        let colors = this.state.theColors.slice(0, this.state.theColors.length)\r\n        let theWeight = 1\r\n        if (this.state.weighting) theWeight = this.weightInput.current.value\r\n        if (event.target.id===\"save-new-color\") {\r\n            colorNumber = colors.length\r\n        }\r\n        colors[colorNumber] = {\r\n            red: Number(this.redInput.current.value),\r\n            green: Number(this.greenInput.current.value),\r\n            blue: Number(this.blueInput.current.value),\r\n            name: this.nameInput.current.value,\r\n            weight: theWeight\r\n        }\r\n        this.setState({theColors: colors.slice(0,colors.length), currentlyEditing: {}})\r\n    }\r\n\r\n    colorInputChange(event) {\r\n        let theColors = this.state.theColors\r\n        let currentlyEditing = this.state.currentlyEditing\r\n        let currentColor = event.target.id.slice(0,3)\r\n        let inputNum = Number(event.target.value)\r\n        if (currentColor===\"gre\") currentColor = \"green\"\r\n        if (currentColor===\"blu\") currentColor = \"blue\"\r\n\r\n        if (event.target.value===\"\") { return \r\n        } else if (checkIntInRange(inputNum, -1, 256)) {\r\n            currentlyEditing.color[currentColor] = inputNum\r\n            this.setState({currentlyEditing: currentlyEditing, theColors: theColors})\r\n        } else {\r\n            if (currentColor===\"red\") this.redInput.current.value = currentlyEditing.color.red\r\n            if (currentColor===\"green\") this.greenInput.current.value = currentlyEditing.color.green\r\n            if (currentColor===\"blue\") this.blueInput.current.value = currentlyEditing.color.blue\r\n        }\r\n    }\r\n\r\n    weightInputChange(event) {\r\n        let currentlyEditing = this.state.currentlyEditing\r\n        let inputNum = Number(event.target.value)\r\n\r\n        if (event.target.value===\"\") { return \r\n        } else if (inputNum>0 && inputNum%1===0) {\r\n            currentlyEditing.weight = inputNum\r\n            this.setState({currentlyEditing: currentlyEditing})\r\n        } else {\r\n            this.weightInput.current.value = currentlyEditing.weight\r\n        }\r\n    }\r\n\r\n    openAddColor() {\r\n        this.setState({currentlyEditing: {editing: \"adding color\", color: {}}})\r\n    }\r\n\r\n    presetSelect() {\r\n        let input = this.presetSelector.current.value\r\n        if (input===\"\") return\r\n        let colorPresets = []\r\n        for (let preset of this.state.colorPresets) colorPresets.push(preset)\r\n        let presetNumber = Number(input)\r\n        this.setState({theColors: colorPresets[presetNumber].colors})\r\n    }\r\n\r\n    openNamePreset() {\r\n        this.setState({currentlyEditing: {editing: \"naming preset\"}})\r\n    }\r\n\r\n    savePreset() {\r\n        let colorPresets = []\r\n        let theColors = []\r\n        for (let preset of this.state.colorPresets) colorPresets.push(preset)\r\n        for (let color of this.state.theColors) theColors.push(color)\r\n        let presetName = this.nameInput.current.value\r\n        let newColorPreset = {\r\n            name: presetName,\r\n            colors: theColors\r\n        }\r\n        colorPresets.push(newColorPreset)\r\n        this.setState({currentlyEditing: {}, colorPresets: colorPresets})\r\n    }\r\n\r\n    deletePreset() {\r\n        let presetNum = Number(this.presetSelector.current.value)\r\n        let colorPresets = []\r\n        for (let preset of this.state.colorPresets) colorPresets.push(preset)\r\n        colorPresets.splice(presetNum, 1)\r\n        this.setState({colorPresets: colorPresets})\r\n        this.presetSelector.current.value = \"\"\r\n    }\r\n\r\n    textDisplayCheckChange(event) {\r\n        let whatIsChanging = event.target.name.slice(0,4)\r\n        if (whatIsChanging===\"rgb-\") whatIsChanging = \"rgb\"\r\n        if (whatIsChanging===\"coun\") whatIsChanging = \"countBoolean\"\r\n        let textDisplay = this.state.textDisplay\r\n        let newTextDisplay = textDisplay\r\n        newTextDisplay[whatIsChanging] = !newTextDisplay[whatIsChanging]\r\n        this.setState({textDisplay: newTextDisplay})\r\n    }\r\n\r\n    textDisplay(stateObject) {\r\n        let theColor = stateObject.theColors[stateObject.currentColor]\r\n        let textDisplay = stateObject.textDisplay\r\n\r\n        let countSection = null\r\n        let nameSection = null\r\n        let rgbSection = null\r\n        let textColor = \"white\"\r\n        \r\n        let standbyName = \"\"\r\n        let standbyColors = null\r\n        if (stateObject.surfingColors) {\r\n            if (((stateObject.red + stateObject.green + stateObject.blue)/3)>128) textColor = \"black\" //if the background is light, let's make the text black\r\n            if (textDisplay.name) standbyName = \"standby\"\r\n            if (textDisplay.rgb) standbyColors = <h3 key=\"0\" style={{color: textColor}}>r: {stateObject.red} g: {stateObject.green} b: {stateObject.blue}</h3>\r\n            return (\r\n                <div id=\"text-display-outer\">\r\n                    <div id=\"text-display-inner\">\r\n                        <h1 style={{color: textColor}}><em>{standbyName}</em></h1>\r\n                        {standbyColors}\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else if (!theColor) { return null\r\n        } else if (((theColor.red + theColor.green + theColor.blue)/3)>128) textColor = \"black\"\r\n\r\n        if (textDisplay.countBoolean) {\r\n            countSection = [\r\n                <h1 key=\"0\" style={{color: textColor}}>{textDisplay.count}</h1>\r\n            ]\r\n        }\r\n        if (textDisplay.name) {\r\n            nameSection = [\r\n                <h1 key=\"0\" style={{color: textColor}}><em>{theColor.name}</em></h1>\r\n            ]\r\n        }\r\n        if (textDisplay.rgb) {\r\n            rgbSection = [\r\n                <h3 key=\"0\" style={{color: textColor}}>r: {theColor.red} g: {theColor.green} b: {theColor.blue}</h3>\r\n            ]\r\n        }\r\n\r\n        return (\r\n            <div id=\"text-display-outer\">\r\n                <div id=\"text-display-inner\">\r\n                    {nameSection}\r\n                    {rgbSection}\r\n                </div>\r\n                <div id=\"text-display-inner\">\r\n                    {countSection}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    otherOptionChange(e) {\r\n        let otherOptions = this.state.otherOptions\r\n        let combinedPresets = []\r\n        if (e.target.name===\"weighting-check\") { otherOptions.weighting = !otherOptions.weighting\r\n        } else if (e.target.id===\"export-button\") { otherOptions.exporting = !otherOptions.exporting\r\n        } else if (e.target.id===\"import-button\") { otherOptions.importing = !otherOptions.importing\r\n        } else if (e.target.id===\"import-export-cancel\") {\r\n            otherOptions.importing = false\r\n            otherOptions.exporting = false\r\n        } else if (e.target.id===\"confirm-import\") {\r\n            for (let preset of this.state.colorPresets) combinedPresets.push(preset)\r\n            let newPresets = JSON.parse(this.importTextArea.current.value)\r\n            if (typeof(newPresets)===\"object\" && newPresets.length) { //probably should write a function that can perform a safer and better check\r\n                for (let preset of newPresets) combinedPresets.push(preset)\r\n                this.setState({colorPresets: combinedPresets})\r\n            }\r\n        }\r\n        if (e.target.id!==\"confirm-import\") this.setState({otherOptions: otherOptions})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                id=\"the-div\"\r\n                style={{backgroundColor: `rgb(${this.state.red},${this.state.green},${this.state.blue})`}}\r\n                onMouseDown={this.mouseDown}\r\n                onMouseUp={this.mouseUp}\r\n                onTouchStart={this.touchStart}\r\n                onTouchEnd={this.touchEnd}\r\n                onTouchCancel={this.touchCancel}\r\n            >\r\n                {this.optionsMenu(this.state)}\r\n                {this.textDisplay(this.state)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//----helper functions----//\r\n\r\nfunction randomInteger(min, max) {\r\n    let range = max - min + 1\r\n    return Math.floor(range*(Math.random())) + min\r\n}\r\n\r\nfunction checkIntInRange(input, min, max) { //input as a STRING!!!\r\n    if (\r\n        input===\"\" ||\r\n        (typeof(input)===\"number\" &&\r\n        input%1===0 &&\r\n        input > min &&          //EXCLUSIVE\r\n        input < max)\r\n    ) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nfunction hexStringToColorObject(hexString) { // hexString == 5e2466\r\n    let upperCaseString = hexString.toUpperCase() // upperCaseString == 5E2466\r\n    function charToNum(char) {\r\n        let codeNum = char.charCodeAt(0) //turns a single char into its unicode number\r\n        if (47 < codeNum && codeNum < 58) { //if it's a digit\r\n            return codeNum - 48             //=>0-9\r\n        } else if (64 < codeNum && codeNum < 71) { //if it's an uppercase letter\r\n            return codeNum - 55             //10-15\r\n        }\r\n    }\r\n    return {                                                                     // { red: 94, green: 36, blue: 102 }\r\n        red: 16*charToNum(upperCaseString[0]) + charToNum(upperCaseString[1]),   //result.red == 94\r\n        green: 16*charToNum(upperCaseString[2]) + charToNum(upperCaseString[3]), //result.green == 36\r\n        blue: 16*charToNum(upperCaseString[4]) + charToNum(upperCaseString[5])   //result.blue == 102\r\n    }\r\n}\r\n\r\nexport default withCookies(App);\r\n\r\n//----------planned features-------------//\r\n//\r\n//  *help \r\n//  *random color (?)\r\n//      *random color within range (?)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n    <CookiesProvider>\n        <App />\n    </CookiesProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}